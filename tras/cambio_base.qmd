---
title: "Cambio de Base: Teoría y Ejemplo"
format: revealjs
jupyter: python3
---

# Introducción

El **cambio de base** es una técnica fundamental en álgebra lineal. Permite representar vectores y sistemas de ecuaciones en diferentes sistemas de coordenadas, facilitando la resolución de problemas en varias áreas, desde geometría hasta aprendizaje automático.

---

# Teoría del Cambio de Base

Un vector puede ser representado en diferentes bases. Matemáticamente, si tenemos un vector $\mathbf{v}$ en una base $\mathcal{B}$, y deseamos cambiar a una nueva base $\mathcal{C}$, podemos usar una matriz de transformación.

### Definición:
Si $\mathbf{B}$ es la matriz de cambio de base de $\mathcal{B}$ a $\mathcal{C}$, entonces el vector $\mathbf{v}$ en la nueva base $\mathcal{C}$ es:

$$
\mathbf{v}' = \mathbf{B} \mathbf{v}
$$

Donde:
- $\mathbf{v}$ es el vector original en la base $\mathcal{B}$.
- $\mathbf{v}'$ es el vector en la nueva base $\mathcal{C}$.
- $\mathbf{B}$ es la matriz de cambio de base.

---

# Aplicación del Cambio de Base

Vamos a ver un ejemplo sencillo de un cambio de base en dos dimensiones, rotando un vector en el plano cartesiano.

```{python}

import numpy as np
import matplotlib.pyplot as plt

# Vector original
v = np.array([1, 0])

# Ángulo de rotación en radianes (45 grados)
theta = np.pi / 4

# Matriz de rotación
R = np.array([
    [np.cos(theta), -np.sin(theta)],
    [np.sin(theta), np.cos(theta)]
])

# Aplicar la rotación
v_rotado = R.dot(v)

# Visualización del vector original y el vector rotado
plt.figure(figsize=(6,6))
plt.quiver(0, 0, v[0], v[1], angles='xy', scale_units='xy', scale=1, color='r', label='Vector Original')
plt.quiver(0, 0, v_rotado[0], v_rotado[1], angles='xy', scale_units='xy', scale=1, color='b', label='Vector Rotado')
plt.xlim(-1.5, 1.5)
plt.ylim(-1.5, 1.5)
plt.axhline(0, color='black',linewidth=0.5)
plt.axvline(0, color='black',linewidth=0.5)
plt.gca().set_aspect('equal', adjustable='box')
plt.legend()
plt.title('Rotación de un Vector en el Plano')
plt.grid(True)
plt.show()

```




Ejemplo de dietas












```{python}
import numpy as np
import matplotlib.pyplot as plt

# Generación de datos simulados
n_samples = 100
# Generar datos para personas saludables (etiquetadas como 0)
perimetro_saludable = np.random.normal(80, 5, n_samples)  # Perímetro en cm
estatura_saludable = np.random.normal(170, 10, n_samples)  # Estatura en cm

# Generar datos para personas obesas (etiquetadas como 1)
perimetro_obeso = np.random.normal(110, 10, n_samples)  # Perímetro en cm
estatura_obeso = np.random.normal(165, 10, n_samples)  # Estatura en cm

# Etiquetas
etiquetas_saludable = np.zeros(n_samples)
etiquetas_obeso = np.ones(n_samples)

# Concatenar datos y etiquetas
X = np.vstack((np.column_stack((perimetro_saludable, estatura_saludable)),
               np.column_stack((perimetro_obeso, estatura_obeso))))
y = np.hstack((etiquetas_saludable, etiquetas_obeso))

# Visualización inicial de los datos
plt.figure(figsize=(6, 6))
plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm', edgecolor='k', s=100)
plt.xlabel('Perímetro del estómago (cm)')
plt.ylabel('Estatura (cm)')
plt.title('Datos originales: Saludable vs Obeso')
plt.show()

# Crear una matriz de transformación (cambio de base)
transformation_matrix = np.array([
    [-1, -1],   # Estirar el perímetro del estómago
    [-1, -1]   # Comprimir la estatura
])

# Aplicar el cambio de base
X_transformed = X.dot(transformation_matrix)

# Visualización de los datos después del cambio de base
plt.figure(figsize=(6, 6))
plt.scatter(X_transformed[:, 0], X_transformed[:, 1], c=y, cmap='coolwarm', edgecolor='k', s=100)
plt.xlabel('Nueva Dimensión 1')
plt.ylabel('Nueva Dimensión 2')
plt.title('Datos después del cambio de base')
plt.show()

```