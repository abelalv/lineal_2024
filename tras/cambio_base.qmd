---
title: "Cambio de Base: Teoría y Ejemplo"
format: revealjs
echo: false
---

# Introducción

El **cambio de base** es una técnica fundamental en álgebra lineal. Permite representar vectores y sistemas de ecuaciones en diferentes sistemas de coordenadas, facilitando la resolución de problemas en varias áreas, desde geometría hasta aprendizaje automático.

---

## Teoría del Cambio de Base

Un vector puede ser representado en diferentes bases. Matemáticamente, si tenemos un vector $\mathbf{v}$ en una base $\mathcal{B}$, y deseamos cambiar a una nueva base $\mathcal{C}$, podemos usar una matriz de transformación.

### Definición:
Si $\mathbf{B}$ es la matriz de cambio de base de $\mathcal{B}$ a $\mathcal{C}$, entonces el vector $\mathbf{v}$ en la nueva base $\mathcal{C}$ es:

$$
\mathbf{v}' = \mathbf{B} \mathbf{v}
$$

Donde:
- $\mathbf{v}$ es el vector original en la base $\mathcal{B}$.
- $\mathbf{v}'$ es el vector en la nueva base $\mathcal{C}$.
- $\mathbf{B}$ es la matriz de cambio de base.

---


# ejemplo Grafico

![](image.png)

---

## Ejemplo de dietas



```{python}
import numpy as np
import matplotlib.pyplot as plt

# Generación de datos simulados
n_samples = 100
# Generar datos para personas saludables (etiquetadas como 0)
perimetro_saludable = np.random.normal(80, 5, n_samples)  # Perímetro en cm
estatura_saludable = np.random.normal(170, 10, n_samples)  # Estatura en cm

# Generar datos para personas obesas (etiquetadas como 1)
perimetro_obeso = np.random.normal(110, 10, n_samples)  # Perímetro en cm
estatura_obeso = np.random.normal(165, 10, n_samples)  # Estatura en cm

# Etiquetas
etiquetas_saludable = np.zeros(n_samples)
etiquetas_obeso = np.ones(n_samples)

# Concatenar datos y etiquetas
X = np.vstack((np.column_stack((perimetro_saludable, estatura_saludable)),
               np.column_stack((perimetro_obeso, estatura_obeso))))
y = np.hstack((etiquetas_saludable, etiquetas_obeso))



# Crear una matriz de transformación (cambio de base)
transformation_matrix = np.array([
    [-1, -1],   # Estirar el perímetro del estómago
    [-1, -1]   # Comprimir la estatura
])

# Aplicar el cambio de base
X_transformed = X.dot(transformation_matrix)

# Visualización de los datos después del cambio de base
plt.figure(figsize=(6, 6))
plt.scatter(X_transformed[:, 0], X_transformed[:, 1], c=y, cmap='coolwarm', edgecolor='k', s=100)
plt.xlabel('Nueva Dimensión 1')
plt.ylabel('Nueva Dimensión 2')
plt.title('Datos después del cambio de base')
plt.show()




```


----
```{python}
import numpy as np
import matplotlib.pyplot as plt

# Generación de datos simulados
n_samples = 100
# Generar datos para personas saludables (etiquetadas como 0)
perimetro_saludable = np.random.normal(80, 5, n_samples)  # Perímetro en cm
estatura_saludable = np.random.normal(170, 10, n_samples)  # Estatura en cm

# Generar datos para personas obesas (etiquetadas como 1)
perimetro_obeso = np.random.normal(110, 10, n_samples)  # Perímetro en cm
estatura_obeso = np.random.normal(165, 10, n_samples)  # Estatura en cm

# Etiquetas
etiquetas_saludable = np.zeros(n_samples)
etiquetas_obeso = np.ones(n_samples)

# Concatenar datos y etiquetas
X = np.vstack((np.column_stack((perimetro_saludable, estatura_saludable)),
               np.column_stack((perimetro_obeso, estatura_obeso))))
y = np.hstack((etiquetas_saludable, etiquetas_obeso))



# Crear una matriz de transformación (cambio de base)
transformation_matrix = np.array([
    [-1, -1],   # Estirar el perímetro del estómago
    [-1, -1]   # Comprimir la estatura
])

# Aplicar el cambio de base
X_transformed = X.dot(transformation_matrix)




# Visualización inicial de los datos
plt.figure(figsize=(6, 6))
plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm', edgecolor='k', s=100)
plt.xlabel('Perímetro del estómago (cm)')
plt.ylabel('Estatura (cm)')
plt.title('Datos originales: Saludable vs Obeso')
plt.show()
```

---
 Encontrar el cambio de base entre estas dos bases y aplicarla a los siguientes vectores:
$$
\mathbf{V}_1 = \begin{pmatrix} 2 \\ 0 \\ 1 \end{pmatrix}, \quad
\mathbf{V}_2 = \begin{pmatrix} 1 \\ 2 \\ 0 \end{pmatrix}, \quad
\mathbf{V}_3 = \begin{pmatrix} 1 \\ 1 \\ 1 \end{pmatrix}
$$

$$
\mathbf{w}_1 = \begin{pmatrix} 6 \\ 3 \\ 3 \end{pmatrix}, \quad
\mathbf{w}_2 = \begin{pmatrix} 4 \\ -1 \\ 3 \end{pmatrix}, \quad
\mathbf{w}_3 = \begin{pmatrix} 5 \\ 5 \\ 2 \end{pmatrix}
$$
