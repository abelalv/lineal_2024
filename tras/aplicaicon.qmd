title: "Actividad: Lanzamiento de una Pelota y Transformaciones Lineales"
author: "Instructor de Ingeniería"
date: "2023"
format: html
jupyter: python3
---

## Introducción

En esta actividad, simularemos el **lanzamiento de una pelota** y exploraremos cómo se pueden aplicar **transformaciones lineales** y **cambio de base** a la trayectoria de la pelota. Veremos cómo las matrices de transformación pueden alterar las trayectorias y cómo se expresan en diferentes sistemas de referencia.

### Objetivos
1. Comprender cómo aplicar transformaciones lineales a la trayectoria de un objeto en movimiento.
2. Utilizar matrices de cambio de base para observar la trayectoria desde diferentes sistemas de referencia.
3. Visualizar los efectos de estas transformaciones mediante animaciones interactivas.

## Animación del Lanzamiento de la Pelota

```{python}
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter

# Parámetros físicos del lanzamiento
g = 9.81  # gravedad (m/s^2)
v0 = 20  # velocidad inicial (m/s)
angle = 45  # ángulo de lanzamiento en grados
time_end = 2 * v0 * np.sin(np.radians(angle)) / g  # Tiempo total de vuelo
t = np.linspace(0, time_end, num=500)  # Tiempo dividido en intervalos

# Cálculo de las componentes de velocidad inicial
v0x = v0 * np.cos(np.radians(angle))
v0y = v0 * np.sin(np.radians(angle))

# Posiciones de la pelota en función del tiempo
x = v0x * t  # Posición en X
y = v0y * t - 0.5 * g * t**2  # Posición en Y

# Crear una figura
fig, ax = plt.subplots()

# Limites de los ejes
ax.set_xlim(0, max(x))
ax.set_ylim(0, max(y) + 2)

# Dibujar la pelota
ball, = ax.plot([], [], 'ro', markersize=8)  # pelota
path, = ax.plot([], [], 'b-', lw=2)  # trayectoria

# Inicializar la animación
def init():
    ball.set_data([], [])
    path.set_data([], [])
    return ball, path

# Función para actualizar la posición de la pelota en cada frame
def update(frame):
    ball.set_data(x[frame], y[frame])  # Actualizar la posición de la pelota
    path.set_data(x[:frame], y[:frame])  # Actualizar la trayectoria
    return ball, path

# Crear la animación
ani = FuncAnimation(fig, update, frames=len(t), init_func=init, interval=20, blit=True)

# Guardar la animación como un GIF
gif_writer = PillowWriter(fps=30)  # Ajusta los FPS según tu preferencia
ani.save("lanzamiento_parabolico.gif", writer=gif_writer)

plt.title(f"Lanzamiento parabólico: Velocidad inicial = {v0} m/s, Ángulo = {angle}°")
plt.xlabel("Distancia (m)")
plt.ylabel("Altura (m)")
plt.grid(True)
plt.show()

```
A continuación, se presenta una simulación del **lanzamiento parabólico** de una pelota con una velocidad inicial $v_0$, usando las ecuaciones de movimiento bajo la influencia de la gravedad. La simulación muestra la trayectoria en el plano cartesiano $xy$, y luego se aplica una **transformación lineal** para visualizar la trayectoria desde diferentes perspectivas.

```{python}
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Parámetros físicos del lanzamiento
g = 9.81  # gravedad (m/s^2)
v0 = 20  # velocidad inicial (m/s)
angle = 45  # ángulo de lanzamiento en grados
time_end = 2 * v0 * np.sin(np.radians(angle)) / g  # Tiempo total de vuelo
t = np.linspace(0, time_end, num=500)  # Tiempo dividido en intervalos

# Cálculo de las componentes de velocidad inicial
v0x = v0 * np.cos(np.radians(angle))
v0y = v0 * np.sin(np.radians(angle))

# Posiciones de la pelota en función del tiempo
x = v0x * t  # Posición en X
y = v0y * t - 0.5 * g * t**2  # Posición en Y

# Crear una figura
fig, ax = plt.subplots()

# Limites de los ejes
ax.set_xlim(0, max(x))
ax.set_ylim(0, max(y) + 2)

# Dibujar la pelota
ball, = ax.plot([], [], 'ro', markersize=8)  # pelota
path, = ax.plot([], [], 'b-', lw=2)  # trayectoria

# Inicializar la animación
def init():
    ball.set_data([], [])
    path.set_data([], [])
    return ball, path

# Función para actualizar la posición de la pelota en cada frame
def update(frame):
    ball.set_data(x[frame], y[frame])  # Actualizar la posición de la pelota
    path.set_data(x[:frame], y[:frame])  # Actualizar la trayectoria
    return ball, path

# Crear la animación
ani = FuncAnimation(fig, update, frames=len(t), init_func=init, interval=20, blit=True)

plt.title(f"Lanzamiento parabólico: Velocidad inicial = {v0} m/s, Ángulo = {angle}°")
plt.xlabel("Distancia (m)")
plt.ylabel("Altura (m)")
plt.grid(True)
plt.show()



```

```{python}
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

# Función para crear los vértices de un cubo
def crear_dado():
    puntos = np.array([[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],
                       [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]])
    return puntos - 0.5  # Centrar el cubo en el origen

# Función para crear las caras del cubo
def crear_caras(puntos):
    caras = [[puntos[j] for j in [0, 1, 2, 3]],  # Cara inferior
             [puntos[j] for j in [4, 5, 6, 7]],  # Cara superior
             [puntos[j] for j in [0, 1, 5, 4]],  # Cara frontal
             [puntos[j] for j in [2, 3, 7, 6]],  # Cara trasera
             [puntos[j] for j in [0, 3, 7, 4]],  # Cara izquierda
             [puntos[j] for j in [1, 2, 6, 5]]]  # Cara derecha
    return caras

# Función de rotación en 3D
def rotacion_3d(puntos, angulo, eje='x'):
    theta = np.radians(angulo)
    if eje == 'x':
        R = np.array([[1, 0, 0],
                      [0, np.cos(theta), -np.sin(theta)],
                      [0, np.sin(theta), np.cos(theta)]])
    elif eje == 'y':
        R = np.array([[np.cos(theta), 0, np.sin(theta)],
                      [0, 1, 0],
                      [-np.sin(theta), 0, np.cos(theta)]])
    elif eje == 'z':
        R = np.array([[np.cos(theta), -np.sin(theta), 0],
                      [np.sin(theta), np.cos(theta), 0],
                      [0, 0, 1]])
    return np.dot(puntos, R.T)

# Función para dibujar el cubo/dado
def dibujar_dado(puntos):
    caras = crear_caras(puntos)
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    
    # Crear la colección de caras
    ax.add_collection3d(Poly3DCollection(caras, facecolors='cyan', linewidths=1, edgecolors='r', alpha=.25))
    
    # Ajustar límites y etiquetas
    ax.set_xlim([-1, 1])
    ax.set_ylim([-1, 1])
    ax.set_zlim([-1, 1])
    ax.set_xlabel('Eje X')
    ax.set_ylabel('Eje Y')
    ax.set_zlabel('Eje Z')
    
    plt.show()

# Crear el dado
dado = crear_dado()

# Mostrar el dado original
print("Dado original")
dibujar_dado(dado)

# Rotar el dado 45 grados en el eje Y
dado_rotado = rotacion_3d(dado, 60, eje='y')

# Mostrar el dado rotado
print("Dado rotado 45 grados en el eje Y")
dibujar_dado(dado_rotado)

```
